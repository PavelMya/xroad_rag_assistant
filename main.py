import os
import logging
import argparse
from dotenv import load_dotenv
from pathlib import Path
from tqdm import tqdm
from functools import partial

from langchain_community.document_loaders import DirectoryLoader, TextLoader
from langchain_community.vectorstores import FAISS
from langchain_community.embeddings import OpenAIEmbeddings
from langchain.text_splitter import RecursiveCharacterTextSplitter

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(filename="build_faiss.log", level=logging.INFO, format="%(asctime)s - %(message)s")

# –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
parser = argparse.ArgumentParser(description="Build FAISS index from X-Road documentation")
parser.add_argument("--data_dir", default="xroad_documentation", help="Directory with .md files")
parser.add_argument("--index_dir", default="faiss_index", help="Where to save FAISS index")
args = parser.parse_args()

# –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv()
api_key = os.getenv("OPENAI_API_KEY")
if not api_key:
    raise RuntimeError("OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
data_path = Path(args.data_dir)
if not data_path.exists():
    raise FileNotFoundError(f"–ü–∞–ø–∫–∞ {data_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

loader = DirectoryLoader(
    str(data_path),
    glob="**/*.md",
    loader_cls=partial(TextLoader, encoding="utf-8")
)
docs = loader.load()
logging.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(docs)}")
print(f"üìò –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(docs)}")

# –ß–∞–Ω–∫–∏
splitter = RecursiveCharacterTextSplitter(chunk_size=1000, chunk_overlap=200)
chunks = splitter.split_documents(docs)
logging.info(f"–†–∞–∑–±–∏—Ç–æ –Ω–∞ —á–∞–Ω–∫–∏: {len(chunks)}")
print(f"‚úÇÔ∏è –†–∞–∑–±–∏—Ç–æ –Ω–∞ —á–∞–Ω–∫–∏: {len(chunks)}")

# –≠–º–±–µ–¥–¥–∏–Ω–≥–∏ –∏ FAISS
embeddings = OpenAIEmbeddings(api_key=api_key)

print("üíæ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã FAISS...")
vectorstore = FAISS.from_documents(tqdm(chunks, desc="Embedding chunks"), embeddings)

# –°–æ—Ö—Ä–∞–Ω—è–µ–º
index_dir = args.index_dir
vectorstore.save_local(index_dir)
logging.info(f"–ò–Ω–¥–µ–∫—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤: {index_dir}")
print(f"‚úÖ FAISS –∏–Ω–¥–µ–∫—Å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤: {index_dir}")
from fastapi import FastAPI
from fastapi.responses import JSONResponse, FileResponse
from fastapi.staticfiles import StaticFiles
from pydantic import BaseModel
from chat import qa_chain, agent  # —Ç–µ–ø–µ—Ä—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ agent

app = FastAPI()
app.mount("/static", StaticFiles(directory="static"), name="static")

@app.get("/")
async def index():
    return FileResponse("static/index.html")

class Question(BaseModel):
    question: str

@app.post("/chat")
async def chat_endpoint(q: Question):
    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç RAG
    from chat import enhanced_query
    result = enhanced_query(q.question)
    answer = result.get("answer", "").strip()
    task = result.get("task", "").strip()

    # –ï—Å–ª–∏ RAG –Ω–µ –¥–∞–ª –æ—Ç–≤–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤–æ–æ–±—â–µ –Ω–µ –ø–æ–Ω—è–ª –≤–æ–ø—Ä–æ—Å) ‚Äî fallback –Ω–∞ function-calling
    if not answer or answer.lower().startswith("i don't know") or (not task and "error" in answer.lower()):
        try:
            agent_answer = agent.run(q.question)
            return JSONResponse({
                "answer": f"üõ†Ô∏è {agent_answer}",
                "task": "Function calling",
                "system": "",
                "symptom": "",
                "context": "",
                "confidence": "High",
                "sources": []
            })
        except Exception as e:
            return JSONResponse({
                "answer": f"‚ö†Ô∏è Function tool failed: {str(e)}",
                "task": "Function call failed",
                "system": "",
                "symptom": "",
                "context": "",
                "confidence": "Low",
                "sources": []
            })

    # –ï—Å–ª–∏ –≤—Å—ë –Ω–æ—Ä–º–∞–ª—å–Ω–æ ‚Äî –æ—Ç–¥–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    return JSONResponse({
        "answer": answer,
        "task": task,
        "system": result.get("system", ""),
        "symptom": result.get("symptom", ""),
        "context": result.get("context", ""),
        "confidence": result.get("confidence", ""),
        "sources": [
            doc.metadata.get("source", "Unknown")
            for doc in result.get("source_documents", [])
        ]
    })